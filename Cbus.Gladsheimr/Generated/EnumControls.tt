<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="BifrostReference.t4" once="true" #>
<#@ include file="Common.t4" once="true" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CBUS.Bifrost" #>
<#@ output extension=".cs" #>
<#	var name = "cbus-4.0-Rev-8d-Guide-6b-opcodes";

    Usings();
    Header(name);

	var loader = new Loader(name);
	loader.LoadResource();

	var builder = new Builder(loader);
	builder.Build();
#>

namespace Cbus.Gladsheimr.UserControls
{
<#  Common(builder);
#>
	#region Enum user controls

<#	foreach (var enumerationName in loader.EnumerationNames)
	{
		var userControlName = enumerationName.Replace("Enum", "Control");
		var enumerations =
			loader.EnumerationLines
				.Where(n => n.EnumName == enumerationName)
				.ToList();
		var isFlags =
			enumerations
				.Any(n => n.IsFlags);
#>
    /// <summary>
    /// A <see cref="UserControl"/> to provide a UI control for the <#= enumerationName #> Enumeration.
    /// </summary>
	public partial class <#= userControlName #> : UserControl,
        IEnumControl
	{
		// EnumerationName: <#= enumerationName #>
		// Flags: <#= isFlags #>
		// EnumerationValues:
<#		var enumerationNameLength = enumerations.Select(e => e.ItemName).Max(n => n.Length);
        foreach (var enumeration in enumerations)
		{
#>
		// <#= enumeration.ItemName.PadRight(enumerationNameLength) #> -> <#= (isFlags ? "bit" : "") #> <#= enumeration.Value #>
<#		}
#>

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
<#		foreach (var enumeration in enumerations)
		{
            var value = enumeration.Value;
            if (isFlags)
                value = (int)Math.Pow(2, enumeration.Value);
#>
                [<#= value #>] = "<#= enumeration.Description.Trim('"') #>",
<#		}
#>
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
<#		foreach (var enumeration in enumerations)
		{
            var value = enumeration.Value;
            if (isFlags)
                value = (int)Math.Pow(2, enumeration.Value);
#>
                [<#= value #>] = "<#= enumeration.ItemName #>",
<#		}
#>
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;
        private readonly Label label;

		#endregion

        #region Properties
        
        public string LabelText 
        { 
            get => this.label.Text;
            set => this.label.Text = value;
        }

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public <#= userControlName #>()
		{
            this.comboBox = new ComboBox();
            this.label = new Label();
            InitializeComponent();
		}

		#endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "label";
            // 
            // <#= userControlName #>
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(this.label);
            this.Name = "<#= userControlName #>";
            this.Size = new Size(324, 34);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

<#	}
#>
    #endregion
}
