using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Cbus.Odin.Interfaces;

/*	This file is automatically generated by a T4 template from a data file.
	cbus-4.0-Rev-8d-Guide-6b-opcodes
	It was last generated at 01/04/2022 21:08:56.
	Any changes made manually will be lost when the file is regenerated.
*/

namespace Cbus.Odin
{
	#region Licence

/*
 *	This work is licensed under the:
 *	    Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 *	To view a copy of this license, visit:
 *	    http://creativecommons.org/licenses/by-nc-sa/4.0/
 *	or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *	
 *	License summary:
 *	  You are free to:
 *	    Share, copy and redistribute the material in any medium or format
 *	    Adapt, remix, transform, and build upon the material
 *	
 *	  The licensor cannot revoke these freedoms as long as you follow the license terms.
 *	
 *	  Attribution : You must give appropriate credit, provide a link to the license,
 *	                 and indicate if changes were made. You may do so in any reasonable manner,
 *	                 but not in any way that suggests the licensor endorses you or your use.
 *	
 *	  NonCommercial : You may not use the material for commercial purposes. **(see note below)
 *	
 *	  ShareAlike : If you remix, transform, or build upon the material, you must distribute
 *	                your contributions under the same license as the original.
 *	
 *	  No additional restrictions : You may not apply legal terms or technological measures that
 *	                                legally restrict others from doing anything the license permits.
 *	
 *	 ** For commercial use, please contact the original copyright holder(s) to agree licensing terms
 *	
 *	  This software is distributed in the hope that it will be useful, but WITHOUT ANY
 *	  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE

 *	*/
	#endregion

	#region History

/*	Date		Author
 *	2021-11-06	Richard Crawshaw	Original from Developers' Guide for CBUS version 6b

 *	*/

	#endregion

	#region Enum user controls

	public partial class AccErrorCodeControl : UserControl,
        IEnumControl
	{
		// EnumerationName: AccErrorCodeEnum
		// Flags: False
		// EnumerationValues:
		// CommandNotSupported       ->  1
		// NotInLearnMode            ->  2
		// NotInSetupMode            ->  3
		// TooManyEvents             ->  4
		// InvalidEventVariableIndex ->  6
		// InvalidEvent              ->  7
		// InvalidParameterIndex     ->  9
		// InvalidNodeVariableIndex  ->  10
		// InvalidEventVariableValue ->  11
		// InvalidNodeFariableValue  ->  12

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [1] = "Command Not Supported",
                [2] = "Not In Learn Mode",
                [3] = "Not in Setup Mode",
                [4] = "Too Many Events",
                [6] = "Invalid Event variable index",
                [7] = "Invalid Event",
                [9] = "Invalid Parameter Index",
                [10] = "Invalid Node Variable Index",
                [11] = "Invalid Event Variable Value",
                [12] = "Invalid Node Variable Value",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [1] = "CommandNotSupported",
                [2] = "NotInLearnMode",
                [3] = "NotInSetupMode",
                [4] = "TooManyEvents",
                [6] = "InvalidEventVariableIndex",
                [7] = "InvalidEvent",
                [9] = "InvalidParameterIndex",
                [10] = "InvalidNodeVariableIndex",
                [11] = "InvalidEventVariableValue",
                [12] = "InvalidNodeFariableValue",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public AccErrorCodeControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "AccErrorCodeControl";
            // 
            // AccErrorCodeControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "AccErrorCodeControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class CSFlagsControl : UserControl,
        IEnumControl
	{
		// EnumerationName: CSFlagsEnum
		// Flags: True
		// EnumerationValues:
		// HardwareError      -> bit 0
		// TrackError         -> bit 1
		// TrackOnOff         -> bit 2
		// BusOnHalted        -> bit 3
		// EmStopAllPerformed -> bit 4
		// ResetDone          -> bit 5
		// ServiceModeOnOff   -> bit 6

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [1] = "Hardware error",
                [2] = "Track error",
                [4] = "Track on / off",
                [8] = "Bus on / halted",
                [16] = "Emergency Stop all performed",
                [32] = "Reset done",
                [64] = "Service mode programming on / off",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [1] = "HardwareError",
                [2] = "TrackError",
                [4] = "TrackOnOff",
                [8] = "BusOnHalted",
                [16] = "EmStopAllPerformed",
                [32] = "ResetDone",
                [64] = "ServiceModeOnOff",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public CSFlagsControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "CSFlagsControl";
            // 
            // CSFlagsControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "CSFlagsControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class DccErrorCodeControl : UserControl,
        IEnumControl
	{
		// EnumerationName: DccErrorCodeEnum
		// Flags: False
		// EnumerationValues:
		// LocoStackFull     ->  1
		// LocoAddrTaken     ->  2
		// SessionNotPresent ->  3
		// ConsistEmpty      ->  4
		// LocoNotFound      ->  5
		// CanBusError       ->  6
		// InvalidRequest    ->  7
		// SessionCancelled  ->  8

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [1] = "Loco stack full",
                [2] = "Loco address taken",
                [3] = "Session not present",
                [4] = "Consist empty",
                [5] = "Loco not found",
                [6] = "CAN bus error",
                [7] = "Invalid request",
                [8] = "Session cancelled",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [1] = "LocoStackFull",
                [2] = "LocoAddrTaken",
                [3] = "SessionNotPresent",
                [4] = "ConsistEmpty",
                [5] = "LocoNotFound",
                [6] = "CanBusError",
                [7] = "InvalidRequest",
                [8] = "SessionCancelled",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public DccErrorCodeControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "DccErrorCodeControl";
            // 
            // DccErrorCodeControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "DccErrorCodeControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class EngineStateControl : UserControl,
        IEnumControl
	{
		// EnumerationName: EngineStateEnum
		// Flags: True
		// EnumerationValues:
		// Active        -> bit 0
		// Consisted     -> bit 1
		// ConsistMaster -> bit 2
		// Inactive      -> bit 3

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [1] = "Active",
                [2] = "Consisted",
                [4] = "Consist Master",
                [8] = "Inactive",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [1] = "Active",
                [2] = "Consisted",
                [4] = "ConsistMaster",
                [8] = "Inactive",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public EngineStateControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "EngineStateControl";
            // 
            // EngineStateControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "EngineStateControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class FunctionRangeControl : UserControl,
        IEnumControl
	{
		// EnumerationName: FunctionRangeEnum
		// Flags: False
		// EnumerationValues:
		// F0toF4   ->  1
		// F5toF8   ->  2
		// F9toF12  ->  3
		// F13toF20 ->  4
		// F21toF28 ->  5

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [1] = "F0 to F4",
                [2] = "F5 to F8",
                [3] = "F9 to F12",
                [4] = "F13 to F20",
                [5] = "F21 to F28",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [1] = "F0toF4",
                [2] = "F5toF8",
                [3] = "F9toF12",
                [4] = "F13toF20",
                [5] = "F21toF28",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public FunctionRangeControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "FunctionRangeControl";
            // 
            // FunctionRangeControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "FunctionRangeControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class MonthControl : UserControl,
        IEnumControl
	{
		// EnumerationName: MonthEnum
		// Flags: False
		// EnumerationValues:
		// Jan ->  1
		// Feb ->  2
		// Mar ->  3
		// Apr ->  4
		// May ->  5
		// Jun ->  6
		// Jul ->  7
		// Aug ->  8
		// Sep ->  9
		// Oct ->  10
		// Nov ->  11
		// Dec ->  12

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [1] = "January",
                [2] = "February",
                [3] = "March",
                [4] = "April",
                [5] = "May",
                [6] = "June",
                [7] = "July",
                [8] = "August",
                [9] = "September",
                [10] = "October",
                [11] = "November",
                [12] = "December",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [1] = "Jan",
                [2] = "Feb",
                [3] = "Mar",
                [4] = "Apr",
                [5] = "May",
                [6] = "Jun",
                [7] = "Jul",
                [8] = "Aug",
                [9] = "Sep",
                [10] = "Oct",
                [11] = "Nov",
                [12] = "Dec",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public MonthControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "MonthControl";
            // 
            // MonthControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "MonthControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class NodeFlagsControl : UserControl,
        IEnumControl
	{
		// EnumerationName: NodeFlagsEnum
		// Flags: True
		// EnumerationValues:
		// Consumer             -> bit 0
		// Producer             -> bit 1
		// FLiMMode             -> bit 2
		// BootloadingSupported -> bit 3

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [1] = "Consumer",
                [2] = "Producer",
                [4] = "FLiM Mode",
                [8] = "Module supports bootloading",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [1] = "Consumer",
                [2] = "Producer",
                [4] = "FLiMMode",
                [8] = "BootloadingSupported",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public NodeFlagsControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "NodeFlagsControl";
            // 
            // NodeFlagsControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "NodeFlagsControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class ServiceModeControl : UserControl,
        IEnumControl
	{
		// EnumerationName: ServiceModeEnum
		// Flags: False
		// EnumerationValues:
		// DirectByte      ->  0
		// DirectBit       ->  1
		// PageMode        ->  2
		// RegisterMode    ->  3
		// AddressOnlyMode ->  4

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [0] = "Direct Byte",
                [1] = "Direct Bit",
                [2] = "Page Mode",
                [3] = "Register Mode",
                [4] = "Address Only Mode",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [0] = "DirectByte",
                [1] = "DirectBit",
                [2] = "PageMode",
                [3] = "RegisterMode",
                [4] = "AddressOnlyMode",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public ServiceModeControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "ServiceModeControl";
            // 
            // ServiceModeControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "ServiceModeControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class SessionFlagsControl : UserControl,
        IEnumControl
	{
		// EnumerationName: SessionFlagsEnum
		// Flags: False
		// EnumerationValues:
		// Request ->  0
		// Steal   ->  1
		// Share   ->  2

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [0] = "Request session",
                [1] = "Steal session",
                [2] = "Share session",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [0] = "Request",
                [1] = "Steal",
                [2] = "Share",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public SessionFlagsControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "SessionFlagsControl";
            // 
            // SessionFlagsControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "SessionFlagsControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class SessionStatusControl : UserControl,
        IEnumControl
	{
		// EnumerationName: SessionStatusEnum
		// Flags: False
		// EnumerationValues:
		// NoAck             ->  1
		// OverloadOnService ->  2
		// WriteAck          ->  3
		// Busy              ->  4
		// CVOutOfRange      ->  5

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [1] = "No Acknowledgement",
                [2] = "Overload on service mode programming track",
                [3] = "Write Acknowledgement",
                [4] = "Busy",
                [5] = "CV out of range",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [1] = "NoAck",
                [2] = "OverloadOnService",
                [3] = "WriteAck",
                [4] = "Busy",
                [5] = "CVOutOfRange",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public SessionStatusControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "SessionStatusControl";
            // 
            // SessionStatusControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "SessionStatusControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class SpeedModeControl : UserControl,
        IEnumControl
	{
		// EnumerationName: SpeedModeEnum
		// Flags: False
		// EnumerationValues:
		// Steps128           ->  0
		// Steps14            ->  1
		// Steps28Interleaved ->  2
		// Steps28            ->  3

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [0] = "128 speed steps",
                [1] = "14 speed steps",
                [2] = "28 speed steps interleaved",
                [3] = "28 speed steps",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [0] = "Steps128",
                [1] = "Steps14",
                [2] = "Steps28Interleaved",
                [3] = "Steps28",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public SpeedModeControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "SpeedModeControl";
            // 
            // SpeedModeControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "SpeedModeControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

	public partial class WeekdayControl : UserControl,
        IEnumControl
	{
		// EnumerationName: WeekdayEnum
		// Flags: False
		// EnumerationValues:
		// Sun ->  1
		// Mon ->  2
		// Tue ->  3
		// Wed ->  4
		// Thu ->  5
		// Fri ->  6
		// Sat ->  7

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
                [1] = "Sunday",
                [2] = "Monday",
                [3] = "Tuesday",
                [4] = "Wednesday",
                [5] = "Thursday",
                [6] = "Friday",
                [7] = "Saturday",
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
                [1] = "Sun",
                [2] = "Mon",
                [3] = "Tue",
                [4] = "Wed",
                [5] = "Thu",
                [6] = "Fri",
                [7] = "Sat",
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public WeekdayControl()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "WeekdayControl";
            // 
            // WeekdayControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "WeekdayControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

    #endregion

    // bool
    // byte
    // char
    // uint
    // ushort
    
    #region Bool user controls

    public partial class DirectionControl : UserControl,
        IBoolControl
    {
        // Direction bool F|R

        #region Fields

        private readonly IContainer? components = null;
        private readonly RadioButton radioButtonF;
        private readonly RadioButton radioButtonR;
        #endregion

        #region Properties

        public bool Value
        {
            get
            {
                if (this.radioButtonF.Checked)
                    return false;
                return true;
            }
            set
            {
                if (value)
                    this.radioButtonF.Checked = true;
                else
                    this.radioButtonR.Checked = true;
            }
        }

        #endregion

        #region Constructors

		public DirectionControl()
		{
            this.radioButtonF = new RadioButton();
            this.radioButtonR = new RadioButton();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public string Get() => this.radioButtonF.Checked ? "F" : "R";

        #endregion

        #region Support routines

        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // radioButtonF
            // 
            this.radioButtonF.AutoSize = true;
            this.radioButtonF.Location = new Point(3, 4);
            this.radioButtonF.Name = "radioButtonF";
            this.radioButtonF.Size = new Size(51, 24);
            this.radioButtonF.TabIndex = 1;
            this.radioButtonF.TabStop = true;
            this.radioButtonF.Text = "F";
            this.radioButtonF.UseVisualStyleBackColor = true;
            // 
            // radioButtonR
            // 
            this.radioButtonR.AutoSize = true;
            this.radioButtonR.Location = new Point(54, 4);
            this.radioButtonR.Name = "radioButtonR";
            this.radioButtonR.Size = new Size(51, 24);
            this.radioButtonR.TabIndex = 2;
            this.radioButtonR.TabStop = true;
            this.radioButtonR.Text = "R";
            this.radioButtonR.UseVisualStyleBackColor = true;
            // 
            // DirectionControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.radioButtonF);
            this.Controls.Add(this.radioButtonR);
            this.Name = "DirectionControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
    
    public partial class LightsControl : UserControl,
        IBoolControl
    {
        // Lights bool On|Off

        #region Fields

        private readonly IContainer? components = null;
        private readonly CheckBox checkBox;
        #endregion

        #region Properties

        public bool Value
        {
            get => this.checkBox.Checked;
            set => this.checkBox.Checked = value;
        }

        #endregion

        #region Constructors

		public LightsControl()
		{
            this.checkBox = new CheckBox();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public string Get() => this.checkBox.Checked ? "On" : "Off";

        #endregion

        #region Support routines

        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // checkBox
            // 
            this.checkBox.AutoSize = true;
            this.checkBox.Location = new System.Drawing.Point(3, 5);
            this.checkBox.Name = "checkBox";
            this.checkBox.Size = new System.Drawing.Size(101, 24);
            this.checkBox.TabIndex = 1;
            this.checkBox.Text = "LightsControl";
            this.checkBox.UseVisualStyleBackColor = true;
            // 
            // LightsControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.checkBox);
            this.Name = "LightsControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
    
    public partial class SoundModeControl : UserControl,
        IBoolControl
    {
        // SoundMode bool On|Off

        #region Fields

        private readonly IContainer? components = null;
        private readonly CheckBox checkBox;
        #endregion

        #region Properties

        public bool Value
        {
            get => this.checkBox.Checked;
            set => this.checkBox.Checked = value;
        }

        #endregion

        #region Constructors

		public SoundModeControl()
		{
            this.checkBox = new CheckBox();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods

        public string Get() => this.checkBox.Checked ? "On" : "Off";

        #endregion

        #region Support routines

        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // checkBox
            // 
            this.checkBox.AutoSize = true;
            this.checkBox.Location = new System.Drawing.Point(3, 5);
            this.checkBox.Name = "checkBox";
            this.checkBox.Size = new System.Drawing.Size(101, 24);
            this.checkBox.TabIndex = 1;
            this.checkBox.Text = "SoundModeControl";
            this.checkBox.UseVisualStyleBackColor = true;
            // 
            // SoundModeControl
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.checkBox);
            this.Name = "SoundModeControl";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
    
    #endregion
    
    #region Byte user controls

    public partial class AllocationCodeControl : UserControl,
        IByteControl
    {
        // AllocationCode byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public AllocationCodeControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class BuildControl : UserControl,
        IByteControl
    {
        // Build byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public BuildControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class CAN_IDControl : UserControl,
        IByteControl
    {
        // CAN_ID byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public CAN_IDControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class ConsistControl : UserControl,
        IByteControl
    {
        // Consist byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public ConsistControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class CSNumberControl : UserControl,
        IByteControl
    {
        // CSNumber byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public CSNumberControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Data1Control : UserControl,
        IByteControl
    {
        // Data1 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Data1Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Data2Control : UserControl,
        IByteControl
    {
        // Data2 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Data2Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Data3Control : UserControl,
        IByteControl
    {
        // Data3 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Data3Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Data4Control : UserControl,
        IByteControl
    {
        // Data4 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Data4Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Data5Control : UserControl,
        IByteControl
    {
        // Data5 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Data5Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Data6Control : UserControl,
        IByteControl
    {
        // Data6 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Data6Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class DebugStatusControl : UserControl,
        IByteControl
    {
        // DebugStatus byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public DebugStatusControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class DivControl : UserControl,
        IByteControl
    {
        // Div byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public DivControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class ENIndexControl : UserControl,
        IByteControl
    {
        // ENIndex byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public ENIndexControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class EVIndexControl : UserControl,
        IByteControl
    {
        // EVIndex byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public EVIndexControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class ExtendedOpCodeControl : UserControl,
        IByteControl
    {
        // ExtendedOpCode byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public ExtendedOpCodeControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Fn1Control : UserControl,
        IByteControl
    {
        // Fn1 byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Fn1Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Fn2Control : UserControl,
        IByteControl
    {
        // Fn2 byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Fn2Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Fn3Control : UserControl,
        IByteControl
    {
        // Fn3 byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Fn3Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class FunctionNumberControl : UserControl,
        IByteControl
    {
        // FunctionNumber byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public FunctionNumberControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class HoursControl : UserControl,
        IByteControl
    {
        // Hours byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public HoursControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class IndexControl : UserControl,
        IByteControl
    {
        // Index byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public IndexControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class MajorControl : UserControl,
        IByteControl
    {
        // Major byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public MajorControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class ManufIdControl : UserControl,
        IByteControl
    {
        // ManufId byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public ManufIdControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class MinorControl : UserControl,
        IByteControl
    {
        // Minor byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public MinorControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class MinutesControl : UserControl,
        IByteControl
    {
        // Minutes byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public MinutesControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class ModeControl : UserControl,
        IByteControl
    {
        // Mode byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public ModeControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class ModuleIdControl : UserControl,
        IByteControl
    {
        // ModuleId byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public ModuleIdControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class MonthDayControl : UserControl,
        IByteControl
    {
        // MonthDay byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public MonthDayControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class NVIndexControl : UserControl,
        IByteControl
    {
        // NVIndex byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public NVIndexControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Param1Control : UserControl,
        IByteControl
    {
        // Param1 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Param1Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Param2Control : UserControl,
        IByteControl
    {
        // Param2 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Param2Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Param3Control : UserControl,
        IByteControl
    {
        // Param3 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Param3Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Param4Control : UserControl,
        IByteControl
    {
        // Param4 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Param4Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Param5Control : UserControl,
        IByteControl
    {
        // Param5 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Param5Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Param6Control : UserControl,
        IByteControl
    {
        // Param6 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Param6Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class Param7Control : UserControl,
        IByteControl
    {
        // Param7 byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public Param7Control()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class ParamIndexControl : UserControl,
        IByteControl
    {
        // ParamIndex byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public ParamIndexControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class RepetitionsControl : UserControl,
        IByteControl
    {
        // Repetitions byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public RepetitionsControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class SessionControl : UserControl,
        IByteControl
    {
        // Session byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public SessionControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class SpeedDirControl : UserControl,
        IByteControl
    {
        // SpeedDir byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public SpeedDirControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class TemperatureControl : UserControl,
        IByteControl
    {
        // Temperature byte decimal

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public TemperatureControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    public partial class ValueControl : UserControl,
        IByteControl
    {
        // Value byte hex

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public ValueControl()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
    #endregion
    
    #region Char user controls

    public partial class Char1Control : UserControl,
        ICharControl
    {
        // Char1 char char

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class Char2Control : UserControl,
        ICharControl
    {
        // Char2 char char

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class Char3Control : UserControl,
        ICharControl
    {
        // Char3 char char

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class Char4Control : UserControl,
        ICharControl
    {
        // Char4 char char

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class Char5Control : UserControl,
        ICharControl
    {
        // Char5 char char

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class Char6Control : UserControl,
        ICharControl
    {
        // Char6 char char

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class Char7Control : UserControl,
        ICharControl
    {
        // Char7 char char

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    #endregion
    
    #region Uint user controls

    public partial class EventDataControl : UserControl,
        IUintControl
    {
        // EventData uint hex

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    #endregion
    
    #region Ushort user controls

    public partial class AddressControl : UserControl,
        IUshortControl
    {
        // Address ushort decimal

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class CVControl : UserControl,
        IUshortControl
    {
        // CV ushort decimal

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class DeviceNumberControl : UserControl,
        IUshortControl
    {
        // DeviceNumber ushort decimal

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class EventNumberControl : UserControl,
        IUshortControl
    {
        // EventNumber ushort decimal

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    public partial class NodeNumberControl : UserControl,
        IUshortControl
    {
        // NodeNumber ushort decimal

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
    #endregion
}
