<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="BifrostReference.t4" once="true" #>
<#@ include file="Common.t4" once="true" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CBUS.Bifrost" #>
<#@ output extension=".cs" #>
<#	var name = "cbus-4.0-Rev-8d-Guide-6b-opcodes";
    
    Usings();
    Header(name);
	
    var loader = new Loader(name);
	loader.LoadResource();

	var builder = new Builder(loader);
	builder.Build();
#>

namespace Cbus.Odin
{
<#  Common(builder);
    
    var nonEnumProperties =
        builder.OpCodeBlocks
            .SelectMany(n => n.Properties)
            .Select(n => new { Name = n.Name.TrimEnd("0123456789".ToCharArray()), n.DataType, n.Format, })
            .Distinct()
            .OrderBy(n => n.DataType)
            .ThenBy(n => n.Name)
            .ToList();
    nonEnumProperties
        .RemoveAll(n => loader.EnumerationNames.Any(e => e == n.DataType));

    foreach (var dataType in nonEnumProperties.Select(n => n.DataType).Distinct())
    {
#>
    // <#= dataType #>
<#  }
#>
    
    #region Bool user controls

<#  foreach (var property in nonEnumProperties.Where(n => n.DataType.Equals("bool")))
    {
        var userControlName = property.Name + "Control";
        var controlType = "radioButtons";
        if (property.Format == "On|Off")
            controlType = "checkBox";
        var radioButtonNames = new List<string>();
        radioButtonNames.AddRange(property.Format.Split('|'));
#>
    public partial class <#= userControlName #> : UserControl,
        IBoolControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;
<#      if (controlType == "checkBox")
        {
#>
        private readonly CheckBox checkBox;
<#      }
        else if (controlType == "radioButtons")
        {
            foreach (var radioButtonName in radioButtonNames)
            {
#>
        private readonly RadioButton radioButton<#= radioButtonName #>;
<#          }
        }
#>
        #endregion

        #region Properties

        public bool Value
        {
<#      if (controlType == "checkBox")
        {
#>
            get => this.checkBox.Checked;
            set => this.checkBox.Checked = value;
<#      }
        else
        {
#>
            get
            {
                if (this.radioButton<#= radioButtonNames[0] #>.Checked)
                    return false;
                return true;
            }
            set
            {
                if (value)
                    this.radioButton<#= radioButtonNames[0] #>.Checked = true;
                else
                    this.radioButton<#= radioButtonNames[1] #>.Checked = true;
            }
<#      }
#>
        }

        #endregion

        #region Constructors

		public <#= userControlName #>()
		{
<#      if (controlType == "checkBox")
        {
#>
            this.checkBox = new CheckBox();
<#      }
        else if (controlType == "radioButtons")
        {
            foreach (var radioButtonName in radioButtonNames)
            {
#>
            this.radioButton<#= radioButtonName #> = new RadioButton();
<#          }
        }
#>
            InitializeComponent();
		}

        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods

<#      if (controlType == "checkBox")
        {
#>
        public string Get() => this.checkBox.Checked ? "On" : "Off";
<#      }
        else if (controlType == "radioButtons")
        {
#>
        public string Get() => this.radioButton<#= radioButtonNames[0] #>.Checked ? "<#= radioButtonNames[0] #>" : "<#= radioButtonNames[1] #>";
<#      }
#>

        #endregion

        #region Support routines

        private void InitializeComponent()
        {
            this.SuspendLayout();
<#      if (controlType == "checkBox")
        {
#>
            // 
            // checkBox
            // 
            this.checkBox.AutoSize = true;
            this.checkBox.Location = new System.Drawing.Point(3, 5);
            this.checkBox.Name = "checkBox";
            this.checkBox.Size = new System.Drawing.Size(101, 24);
            this.checkBox.TabIndex = 1;
            this.checkBox.Text = "<#= userControlName #>";
            this.checkBox.UseVisualStyleBackColor = true;
<#      }
        else if (controlType == "radioButtons")
        {
            var x = 3;
            var w = 51;
            var tabIndex = 1;
            foreach (var radioButtonName in radioButtonNames)
            {
#>
            // 
            // radioButton<#= radioButtonName #>
            // 
            this.radioButton<#= radioButtonName #>.AutoSize = true;
            this.radioButton<#= radioButtonName #>.Location = new Point(<#= x #>, 4);
            this.radioButton<#= radioButtonName #>.Name = "radioButton<#= radioButtonName #>";
            this.radioButton<#= radioButtonName #>.Size = new Size(<#= w #>, 24);
            this.radioButton<#= radioButtonName #>.TabIndex = <#= tabIndex++ #>;
            this.radioButton<#= radioButtonName #>.TabStop = true;
            this.radioButton<#= radioButtonName #>.Text = "<#= radioButtonName #>";
            this.radioButton<#= radioButtonName #>.UseVisualStyleBackColor = true;
<#              x += w;
            }
        }
#>
            // 
            // <#= userControlName #>
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
<#      if (controlType == "checkBox")
        {
#>
            this.Controls.Add(this.checkBox);
<#      }
        else if (controlType == "radioButtons")
        {
            foreach (var radioButtonName in radioButtonNames)
            {
#>
            this.Controls.Add(this.radioButton<#= radioButtonName #>);
<#          }
        }
#>
            this.Name = "<#= userControlName #>";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
    
<#  }
#>
    #endregion
    
    #region Byte user controls

<#  foreach (var property in nonEnumProperties.Where(n => n.DataType.Equals("byte")))
    {
        var userControlName = property.Name + "Control";
#>
    public partial class <#= property.Name #>Control : UserControl,
        IByteControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public <#= userControlName #>()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods

        public byte Get() => (byte)this.numericUpDown.Value;

        #endregion

        #region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // numericUpDown
            // 
            this.numericUpDown.Location = new Point(87, 4);
            this.numericUpDown.Maximum = 
                new decimal(
                    new int[] 
                    {
                        255,
                        0,
                        0,
                        0
                    }
                );
            this.numericUpDown.Name = "numericUpDown";
            this.numericUpDown.Size = new Size(75, 27);
            this.numericUpDown.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "<#= userControlName #>";
            // 
            // <#= userControlName #>
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.numericUpDown);
            this.Controls.Add(label);
            this.Name = "<#= userControlName #>";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
    
<#  }
#>
    #endregion
    
    #region Char user controls

<#  foreach (var property in nonEnumProperties.Where(n => n.DataType.Equals("char")))
    {
        var userControlName = property.Name + "Control";
#>
    public partial class <#= property.Name #>Control : UserControl,
        ICharControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties
        
        public char Value
        {
            get => ' ';
            set { }
        }

        #endregion

        #region Constructors


        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
<#  }
#>
    #endregion
    
    #region Uint user controls

<#  foreach (var property in nonEnumProperties.Where(n => n.DataType.Equals("uint")))
    {
        var userControlName = property.Name + "Control";
#>
    public partial class <#= property.Name #>Control : UserControl,
        IUintControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties

        public uint Value
        {
            get => (uint)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public <#= userControlName #>()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // numericUpDown
            // 
            this.numericUpDown.Location = new Point(87, 4);
            this.numericUpDown.Maximum =  0xFFFFFFFF;
            this.numericUpDown.Name = "numericUpDown";
            this.numericUpDown.Size = new Size(75, 27);
            this.numericUpDown.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "<#= userControlName #>";
            // 
            // <#= userControlName #>
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.numericUpDown);
            this.Controls.Add(label);
            this.Name = "<#= userControlName #>";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
    
<#  }
#>
    #endregion
    
    #region Ushort user controls

<#  foreach (var property in nonEnumProperties.Where(n => n.DataType.Equals("ushort")))
    {
        var userControlName = property.Name + "Control";
#>
    public partial class <#= property.Name #>Control : UserControl,
        IUshortControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties

        public ushort Value
        {
            get => (ushort)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public <#= userControlName #>()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // numericUpDown
            // 
            this.numericUpDown.Increment = 
                new decimal(
                    new int[] 
                    {
                        16,
                        0,
                        0,
                        0
                    });
            this.numericUpDown.Location = new Point(87, 4);
            this.numericUpDown.Maximum = 
                new decimal(
                    new int[] 
                    {
                        65535,
                        0,
                        0,
                        0
                    });
            this.numericUpDown.Name = "numericUpDown";
            this.numericUpDown.Size = new Size(75, 27);
            this.numericUpDown.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "<#= userControlName #>";
            // 
            // <#= userControlName #>
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.numericUpDown);
            this.Controls.Add(label);
            this.Name = "<#= userControlName #>";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
    
<#  }
#>
    #endregion
}
