<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="BifrostReference.t4" once="true" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CBUS.Bifrost" #>
<#@ output extension=".cs" #>
<#	var name = "cbus-4.0-Rev-8d-Guide-6b-opcodes";
#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Cbus.Odin.Interfaces;

/*	This file is automatically generated by a T4 template from a data file.
	<#= name #>
	It was last generated at <#= DateTime.Now #>.
	Any changes made manually will be lost when the file is regenerated.
*/
<#	var loader = new Loader(name);
	loader.LoadResource();

	var builder = new Builder(loader);
	builder.Build();

    void GenerateIDisposableSupport()
    {
#>
		#region IDisposable support
		
		protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

		#endregion
<#  }
#>

namespace Cbus.Odin
{
	#region Licence

/*
<#= builder.LicenceBlock.Text #>
 *	*/
	#endregion

	#region History

/*	Date		Author
<#= builder.HistoryBlock.Text #>
 *	*/

	#endregion

<#	if (!string.IsNullOrEmpty(builder.FileCommentBlock?.Text))
	{
#>
/*
<#= builder.FileCommentBlock.Text #>
 *	*/

<#	}
#>
	#region Enum user controls

<#	foreach (var enumerationName in loader.EnumerationNames)
	{
		var userControlName = enumerationName.Replace("Enum", "Control");
		var enumerations =
			loader.EnumerationLines
				.Where(n => n.EnumName == enumerationName)
				.ToList();
		var isFlags =
			enumerations
				.Any(n => n.IsFlags);
#>
	public partial class <#= userControlName #> : UserControl,
        IEnumControl
	{
		// EnumerationName: <#= enumerationName #>
		// Flags: <#= isFlags #>
		// EnumerationValues:
<#		var enumerationNameLength = enumerations.Select(e => e.ItemName).Max(n => n.Length);
        foreach (var enumeration in enumerations)
		{
#>
		// <#= enumeration.ItemName.PadRight(enumerationNameLength) #> -> <#= (isFlags ? "bit" : "") #> <#= enumeration.Value #>
<#		}
#>

		#region Fields

        private static readonly Dictionary<byte, string> values =
            new()
            {
<#		foreach (var enumeration in enumerations)
		{
            var value = enumeration.Value;
            if (isFlags)
                value = (int)Math.Pow(2, enumeration.Value);
#>
                [<#= value #>] = "<#= enumeration.Description.Trim('"') #>",
<#		}
#>
            };
        private static readonly Dictionary<byte, string> keys =
            new()
            {
<#		foreach (var enumeration in enumerations)
		{
            var value = enumeration.Value;
            if (isFlags)
                value = (int)Math.Pow(2, enumeration.Value);
#>
                [<#= value #>] = "<#= enumeration.ItemName #>",
<#		}
#>
            };

        private readonly IContainer? components = null;
        private readonly ComboBox comboBox;

		#endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected name.
        /// </summary>
        public string? SelectedName => TextToName(SelectedText);
        
        /// <summary>
        /// Gets the currently selected text.
        /// </summary>
        public string? SelectedText => this.comboBox.SelectedValue?.ToString();
        
        /// <summary>
        /// Gets the currently selected value.
        /// </summary>
        public byte? SelectedValue => TextToIndex(SelectedText);
        
        public string Value
        {
            get => SelectedName ?? string.Empty;
            set => Set(value);
        }

        #endregion

		#region Constructors

		public <#= userControlName #>()
		{
            this.comboBox = new ComboBox();
            InitializeComponent();
		}

		#endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods

        public void Set(byte? value)
        {
            if (!value.HasValue ||
                !values.ContainsKey(value.Value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            this.comboBox.SelectedValue = values[value.Value];
        }
        
        public void Set(string? value)
        {
            if (value is null ||
                !keys.ContainsValue(value))
            {
                this.comboBox.SelectedValue = null;
                return;
            }

            var key = keys.First(n => n.Value == value).Key;
            this.comboBox.SelectedValue = values[key];
        }

        /// <summary>
        /// Gets the Enum value from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static byte? TextToIndex(string? value)
        {
            if (value is null) return null;
            var result =
                values
                    .Where(n => n.Value == value)
                    .Select(n => n.Key)
                    .FirstOrDefault();
            return result;
        }
        
        /// <summary>
        /// Gets the Enum name from the specified <param name="value"/>.
        /// </summary>
        /// <paramref name="value">A <see cref="string"/> containing the text to look up.</paramref>
        public static string? TextToName(string? value)
        {
            if (value is null) return null;
            var key = TextToIndex(value);
            if (!key.HasValue) return null;
            var result = keys[key.Value];
            return result;
        }

        #endregion

		#region Support routines

        private void InitializeComponent()
        {
            Label label;
            label = new Label();
            this.SuspendLayout();
            // 
            // comboBox
            // 
            this.comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            this.comboBox.FormattingEnabled = true;
            this.comboBox.Items.AddRange(values.Values.ToArray());
            this.comboBox.Location = new Point(120, 3);
            this.comboBox.Name = "comboBox";
            this.comboBox.Size = new Size(200, 28);
            this.comboBox.TabIndex = 4;
            // 
            // label
            // 
            label.AutoSize = true;
            label.Location = new Point(3, 6);
            label.Name = "label";
            label.Size = new Size(50, 20);
            label.TabIndex = 3;
            label.Text = "<#= userControlName #>";
            // 
            // <#= userControlName #>
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.Controls.Add(this.comboBox);
            this.Controls.Add(label);
            this.Name = "<#= userControlName #>";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

		#endregion
	}

<#	}
#>
    #endregion

<#
    var nonEnumProperties =
        builder.OpCodeBlocks
            .SelectMany(n => n.Properties)
            .Select(n => new { n.Name, n.DataType, n.Format, })
            .Distinct()
            .OrderBy(n => n.DataType)
            .ThenBy(n => n.Name)
            .ToList();
    nonEnumProperties
        .RemoveAll(n => loader.EnumerationNames.Any(e => e == n.DataType));

    foreach (var dataType in nonEnumProperties.Select(n => n.DataType).Distinct())
    {
#>
    // <#= dataType #>
<#  }
#>
    
    #region Bool user controls

<#  foreach (var property in nonEnumProperties.Where(n => n.DataType.Equals("bool")))
    {
        var userControlName = property.Name;
        while ("0123456789".ToCharArray().Contains(userControlName[userControlName.Length - 1]))
            userControlName.Substring(0, userControlName.Length - 1);
        userControlName += "Control";
        var controlType = "radioButtons";
        if (property.Format == "On|Off")
            controlType = "checkBox";
        var radioButtonNames = new List<string>();
        radioButtonNames.AddRange(property.Format.Split('|'));
#>
    public partial class <#= userControlName #> : UserControl,
        IBoolControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;
<#      if (controlType == "checkBox")
        {
#>
        private readonly CheckBox checkBox;
<#      }
        else if (controlType == "radioButtons")
        {
            foreach (var radioButtonName in radioButtonNames)
            {
#>
        private readonly RadioButton radioButton<#= radioButtonName #>;
<#          }
        }
#>
        #endregion

        #region Properties

        public bool Value
        {
<#      if (controlType == "checkBox")
        {
#>
            get => this.checkBox.Checked;
            set => this.checkBox.Checked = value;
<#      }
        else
        {
#>
            get
            {
                if (this.radioButton<#= radioButtonNames[0] #>.Checked)
                    return false;
                return true;
            }
            set
            {
                if (value)
                    this.radioButton<#= radioButtonNames[0] #>.Checked = true;
                else
                    this.radioButton<#= radioButtonNames[1] #>.Checked = true;
            }
<#      }
#>
        }

        #endregion

        #region Constructors

		public <#= userControlName #>()
		{
<#      if (controlType == "checkBox")
        {
#>
            this.checkBox = new CheckBox();
<#      }
        else if (controlType == "radioButtons")
        {
            foreach (var radioButtonName in radioButtonNames)
            {
#>
            this.radioButton<#= radioButtonName #> = new RadioButton();
<#          }
        }
#>
            InitializeComponent();
		}

        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods

<#      if (controlType == "checkBox")
        {
#>
        public string Get() => this.checkBox.Checked ? "On" : "Off";
<#      }
        else if (controlType == "radioButtons")
        {
#>
        public string Get() => this.radioButton<#= radioButtonNames[0] #>.Checked ? "<#= radioButtonNames[0] #>" : "<#= radioButtonNames[1] #>";
<#      }
#>

        #endregion

        #region Support routines

        private void InitializeComponent()
        {
            this.SuspendLayout();
<#      if (controlType == "checkBox")
        {
#>
            // 
            // checkBox
            // 
            this.checkBox.AutoSize = true;
            this.checkBox.Location = new System.Drawing.Point(3, 5);
            this.checkBox.Name = "checkBox";
            this.checkBox.Size = new System.Drawing.Size(101, 24);
            this.checkBox.TabIndex = 1;
            this.checkBox.Text = "<#= userControlName #>";
            this.checkBox.UseVisualStyleBackColor = true;
<#      }
        else if (controlType == "radioButtons")
        {
            var x = 3;
            var w = 51;
            var tabIndex = 1;
            foreach (var radioButtonName in radioButtonNames)
            {
#>
            // 
            // radioButton<#= radioButtonName #>
            // 
            this.radioButton<#= radioButtonName #>.AutoSize = true;
            this.radioButton<#= radioButtonName #>.Location = new Point(<#= x #>, 4);
            this.radioButton<#= radioButtonName #>.Name = "radioButton<#= radioButtonName #>";
            this.radioButton<#= radioButtonName #>.Size = new Size(<#= w #>, 24);
            this.radioButton<#= radioButtonName #>.TabIndex = <#= tabIndex++ #>;
            this.radioButton<#= radioButtonName #>.TabStop = true;
            this.radioButton<#= radioButtonName #>.Text = "<#= radioButtonName #>";
            this.radioButton<#= radioButtonName #>.UseVisualStyleBackColor = true;
<#              x += w;
            }
        }
#>
            // 
            // <#= userControlName #>
            // 
            this.AutoScaleDimensions = new SizeF(8F, 20F);
            this.AutoScaleMode = AutoScaleMode.Font;
<#      if (controlType == "checkBox")
        {
#>
            this.Controls.Add(this.checkBox);
<#      }
        else if (controlType == "radioButtons")
        {
            foreach (var radioButtonName in radioButtonNames)
            {
#>
            this.Controls.Add(this.radioButton<#= radioButtonName #>);
<#          }
        }
#>
            this.Name = "<#= userControlName #>";
            this.Size = new Size(441, 150);
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
    
<#  }
#>
    #endregion
    
    #region Byte user controls

<#  var regex = new Regex(@"^(.*)\d*$");
    var bytePropertyNames =
        nonEnumProperties
            .Where(n => n.DataType.Equals("byte"))
            .Select(n => new { Name = regex.Matches(n.Name)[0].Value, n.DataType, n.Format, })
            .Distinct()
            .ToList();

  foreach (var property in bytePropertyNames)
    {
        var userControlName = property.Name;
        userControlName += "Control";
#>
    public partial class <#= property.Name #>Control : UserControl,
        IByteControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;
        private readonly NumericUpDown numericUpDown;

        #endregion

        #region Properties
        
        public byte Value
        {
            get => (byte)this.numericUpDown.Value;
            set => this.numericUpDown.Value = value;
        }

        #endregion

        #region Constructors

		public <#= userControlName #>()
		{
            this.numericUpDown = new NumericUpDown();
            InitializeComponent();
		}

        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods


        #endregion

        #region Support routines

        private void InitializeComponent()
        {
        }

        #endregion
    }
    
<#  }
#>
    #endregion
    
    #region Char user controls

<#  foreach (var property in nonEnumProperties.Where(n => n.DataType.Equals("char")))
    {
#>
    public partial class <#= property.Name #>Control : UserControl,
        ICharControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
<#  }
#>
    #endregion
    
    #region Uint user controls

<#  foreach (var property in nonEnumProperties.Where(n => n.DataType.Equals("uint")))
    {
#>
    public partial class <#= property.Name #>Control : UserControl,
        IUintControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
<#  }
#>
    #endregion
    
    #region Ushort user controls

<#  foreach (var property in nonEnumProperties.Where(n => n.DataType.Equals("ushort")))
    {
#>
    public partial class <#= property.Name #>Control : UserControl,
        IUshortControl
    {
        // <#= property.Name #> <#= property.DataType #> <#= property.Format #>

        #region Fields

        private readonly IContainer? components = null;

        #endregion

        #region Properties


        #endregion

        #region Constructors


        #endregion

<#      GenerateIDisposableSupport();
#>

        #region Methods


        #endregion

        #region Support routines


        #endregion
    }
    
<#  }
#>
    #endregion
}
